@page "/callback"
@using Microsoft.AspNetCore.WebUtilities
@using BlazorApp.Client.Extensions
@using BlazorApp.Shared
@using Intuit.Ipp.OAuth2PlatformClient
@inject NavigationManager NavManager
@inject HttpClient Http



<h1>Success!</h1>
<p>You succefully logged in to Quickbooks.</p>
<p>Next store the access and refresh tokens</p>
<p>And then use them</p>

@if (authorizationServerResponse?.Code == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Property</th>
                <th>Value</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>State</td>
                <td>@authorizationServerResponse.State</td>
            </tr>
            <tr>
                <td>Code</td>
                <td>@authorizationServerResponse.Code</td>
            </tr>
            <tr>
                <td>Realm Id</td>
                <td>@authorizationServerResponse.RealmId</td>
            </tr>
            <tr>
                <td>Access Token</td>
                <td>@accessToken</td>
            </tr>
            <tr>
                <td>Refresh Token</td>
                <td>@refreshToken</td>
            </tr>
            <tr>
                <td>Message</td>
                <td>@message</td>
            </tr>
        </tbody>
    </table>
    <button class="btn btn-primary" @onclick="GetAuthTokensAsync">GetAuthTokensAsync</button>
    <button class="btn btn-primary" @onclick="DoIt">DoIt</button>
}

@code {
    private string accessToken;
    private string refreshToken;
    private string message;
    private AuthorizationServerResponse authorizationServerResponse;

    protected override void OnInitialized()
    {
        try
        {
            var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
            var queryStrings = QueryHelpers.ParseQuery(uri.Query);

            authorizationServerResponse = new AuthorizationServerResponse()
            {
                State = NavManager.ExtractQueryStringByKey<string>("state"),
                Code = NavManager.ExtractQueryStringByKey<string>("code"),
                RealmId = NavManager.ExtractQueryStringByKey<string>("realmId")
            };


        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    private async Task GetAuthTokensAsync()
    {
        accessToken = "Loading...";

        var response = await Http.PostAsJsonAsync<AuthorizationServerResponse>($"/api/GetAuthTokensAsync", authorizationServerResponse);
        var tokenResponse = await response.Content.ReadFromJsonAsync<MyTokenResponse>();

        accessToken = tokenResponse.AccessToken;
        refreshToken = tokenResponse.RefreshToken;

    }

    private async Task DoIt()
    {
        message = "Loading...";

        message = await Http.GetStringAsync("/api/DoIt");


    }
}

